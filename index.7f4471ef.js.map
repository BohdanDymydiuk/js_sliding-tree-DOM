{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,EAAO,SAAS,aAAa,CAAC,SAC9B,EAAU,SAAS,gBAAgB,CAAC,MAErC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,CAAA,CAAA,OAAA,QAAA,CAAA,GAAd,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAa,EAAK,UAAU,CAC5B,EAAO,SAAS,aAAa,CAAC,QAEpC,EAAK,MAAM,CAAC,EAAK,UAAU,CAAC,WAAW,CAAC,IAAI,IAC5C,EAAW,WAAW,CAAC,EACzB,C,C,M,E,CANK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,EAAK,gBAAgB,CAAC,QAAS,SAAC,CAAhC,M,EAGE,GAAI,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFc,SAAS,gBAAgB,CAAC,U,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAElC,QAAQ,CAAC,EAAE,MAAM,EAAG,CAC5B,IAAM,EAAc,EAAE,MAAM,CAAC,kBAAkB,CAE3C,GACF,CAAA,EAAY,KAAK,CAAC,OAAO,CACvB,AAA8B,SAA9B,EAAY,KAAK,CAAC,OAAO,CAAc,QAAU,MAFrD,CAIF,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar tree = document.querySelector(\".tree\");\nvar liItems = document.querySelectorAll(\"li\");\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = liItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var item = _step.value;\n        var firstChild = item.firstChild;\n        var span = document.createElement(\"span\");\n        span.append(item.firstChild.textContent.trim());\n        firstChild.replaceWith(span);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\ntree.addEventListener(\"click\", function(e) {\n    var spans = _to_consumable_array(document.querySelectorAll(\"span\"));\n    if (spans.includes(e.target)) {\n        var nextSibling = e.target.nextElementSibling;\n        if (nextSibling) nextSibling.style.display = nextSibling.style.display === \"none\" ? \"block\" : \"none\";\n    }\n});\n\n//# sourceMappingURL=index.7f4471ef.js.map\n","'use strict';\n\nconst tree = document.querySelector('.tree');\nconst liItems = document.querySelectorAll('li');\n\nfor (const item of liItems) {\n  const firstChild = item.firstChild;\n  const span = document.createElement('span');\n\n  span.append(item.firstChild.textContent.trim());\n  firstChild.replaceWith(span);\n}\n\ntree.addEventListener('click', (e) => {\n  const spans = [...document.querySelectorAll('span')];\n\n  if (spans.includes(e.target)) {\n    const nextSibling = e.target.nextElementSibling;\n\n    if (nextSibling) {\n      nextSibling.style.display =\n        nextSibling.style.display === 'none' ? 'block' : 'none';\n    }\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","tree","document","querySelector","liItems","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","value","firstChild","span","createElement","append","textContent","trim","replaceWith","err","return","addEventListener","e","spans","_array_without_holes","isArray","_iterable_to_array","iter","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","includes","target","nextSibling","nextElementSibling","style","display"],"version":3,"file":"index.7f4471ef.js.map"}